akka {
  loglevel = "INFO"
  loggers = ["akka.event.slf4j.Slf4jLogger"]
  log-dead-letters-during-shutdown = off
  actor {
    provider = "akka.cluster.ClusterActorRefProvider"
    serializers {
      kryo = "com.romix.akka.serialization.kryo.KryoSerializer"
    }
    serialization-bindings {
      "common.messages.NumeratedMessage" = kryo
      "java.io.Serializable" = kryo
      "akka.actor.Identify" = akka-misc
      "akka.actor.ActorIdentity" = akka-misc
      "scala.Some" = akka-misc
      "scala.None$" = akka-misc
    }
    kryo.idstrategy = automatic
    kryo.resolve-subclasses = true
  }
  cluster {
    seed-nodes = [
      "akka.tcp://ClusterSystem@localhost:34052",
      "akka.tcp://ClusterSystem@localhost:34053",
      "akka.tcp://ClusterSystem@localhost:34054",
      "akka.tcp://ClusterSystem@localhost:34051"
    ]
    roles = ["Dashboard"]
    sharding {
      guardian-name = "AvatarSharding"
      state-store-mode = "ddata"
      role = "Avatar"
    }
    pub-sub {
      routing-logic = round-robin
    }
    distributed-data.name = ddataReplicator
    metrics {
      enabled = off
      native-library-extract-folder = "target/dashboard/"
    }
  }
  remote {
    startup-timeout = 10 s
    shutdown-timeout = 10 s
    enabled-transports = ["akka.remote.netty.tcp"]
    netty.tcp {
      hostname = "localhost"
      port = 34052
    }
  }

  extensions = ["com.romix.akka.serialization.kryo.KryoSerializationExtension$"]
}

application {
  test-data = off
  pipe-image = ""
  avatar-image = ""
  http-binding-port = 8888
//  http-binding-address = "192.168.1.162"
  http-binding-address = "localhost"
  update-period = 3s
}

kamon.sigar.folder = akka.cluster.metrics.native-library-extract-folder