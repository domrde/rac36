akka {
  loglevel = "INFO"
  loggers = ["akka.event.slf4j.Slf4jLogger"]
  actor {
    provider = "akka.cluster.ClusterActorRefProvider"
    serializers {
      kryo = "com.romix.akka.serialization.kryo.KryoSerializer"
    }
    serialization-bindings {
      "common.GlobalMessages" = kryo
      "common.SharedMessages$NumeratedMessage" = kryo
      "java.io.Serializable" = kryo
      "akka.actor.Identify" = akka-misc
      "akka.actor.ActorIdentity" = akka-misc
      "scala.Some" = akka-misc
      "scala.None$" = akka-misc
    }
    kryo.idstrategy = automatic
    kryo.resolve-subclasses = true
  }
  cluster {
    auto-down-unreachable-after = 10s
    seed-nodes = [
      "akka.tcp://ClusterSystem@localhost:34051",
      "akka.tcp://ClusterSystem@localhost:34053",
      "akka.tcp://ClusterSystem@localhost:34054",
      "akka.tcp://ClusterSystem@localhost:34052"
    ]
    roles = ["Pipe"]
    pub-sub {
      routing-logic = round-robin
    }
    metrics {
      enabled = off
      native-library-extract-folder = "target/"
    }
  }
  remote {
    startup-timeout = 10 s
    shutdown-timeout = 10 s
    enabled-transports = ["akka.remote.netty.tcp"]
    netty.tcp {
      hostname = "localhost"
      port = 34051
    }
  }

  extensions = ["com.romix.akka.serialization.kryo.KryoSerializationExtension$"]
}

pipe {
  ports.input  = 34671
  avatarAddress = "/system/AvatarSharding/Avatar"
}

kamon.sigar.folder = akka.cluster.metrics.native-library-extract-folder